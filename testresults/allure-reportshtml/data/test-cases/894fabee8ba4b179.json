{
  "uid" : "894fabee8ba4b179",
  "name" : "test_createAccount",
  "fullName" : "AppTests.test_web.TestWeb#test_createAccount",
  "historyId" : "552c9c43c592e4d61e63a03ead66df84",
  "time" : {
    "start" : 1603027046125,
    "stop" : 1603027119875,
    "duration" : 73750
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: element is not present",
  "statusTrace" : "self = <test_web.TestWeb object at 0x0000023EA564DFA0>\n\n    @severity(severity_level.BLOCKER)\n    def test_createAccount(self):\n        try:\n            finalData = self.getData('test_createAccount')  # enter your test case name\n            class_instance = LoginPage(self.driver)\n            class_instance.navigateToApplication() \\\n                .clickToSingIn() \\\n                .enterEmailAddress(finalData['Email']) \\\n                .clickToCreateAccount() \\\n                .selectTitle(finalData['Title']) \\\n                .enterFirstName(finalData['FirstName']) \\\n                .enterLastName(finalData['LastName']) \\\n                .enterPassword(finalData['Password']) \\\n                .selectBirthDay(finalData['Birthday']) \\\n                .selectBirthMonth(finalData['BirthMonth']) \\\n                .selectBirthYear(finalData['BirthYear']) \\\n                .checkNewsLetterCheckBox() \\\n                .checkReceiveSpecialOffersCheckBox() \\\n                .enterCompanyName(finalData['CompanyName']) \\\n                .enterAddress1(finalData['Address1']) \\\n                .enterAddress2(finalData['Address2']) \\\n                .enterCity(finalData['City']) \\\n                .selectState(finalData['State']) \\\n                .enterPostCode(finalData['PostCode']) \\\n                .selectCountry(finalData['Country']) \\\n                .enterOtherInfo(finalData['OtherInfo']) \\\n                .enterPhoneNumber(finalData['PhoneNumber']) \\\n                .enterMobileNumber(finalData['MobileNumber']) \\\n                .clickToRegister() \\\n                .verifyMyAccountPage()\n        except WebDriverException as e:\n>           raise e\n\nAppTests\\test_web.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nAppTests\\test_web.py:49: in test_createAccount\n    class_instance.navigateToApplication() \\\nAppPages\\CreateAccount.py:17: in selectTitle\n    self.webDriveObject.click(self, By.XPATH, genderXPath)\nwebdriver\\WebdriverBasePage.py:43: in click\n    raise e\nwebdriver\\WebdriverBasePage.py:35: in click\n    mwait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7cecb123aad2edae8a7bbb5aa9f368e3\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x0000023EA5898670>, message = 'element is not present'\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: element is not present\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "test_data",
    "time" : {
      "start" : 1603027046123,
      "stop" : 1603027046124,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "test_setup",
    "time" : {
      "start" : 1603027042409,
      "stop" : 1603027046121,
      "duration" : 3712
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "afterStages" : [ {
    "name" : "test_setup::0",
    "time" : {
      "start" : 1603027119923,
      "stop" : 1603027122232,
      "duration" : 2309
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('test_setup', 'test_data')"
  }, {
    "name" : "parentSuite",
    "value" : "AppTests"
  }, {
    "name" : "suite",
    "value" : "test_web"
  }, {
    "name" : "subSuite",
    "value" : "TestWeb"
  }, {
    "name" : "host",
    "value" : "IN-IT2755"
  }, {
    "name" : "thread",
    "value" : "19920-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "AppTests.test_web"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "blocker",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ "broken" ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.usefixtures('test_setup', 'test_data')" ]
  },
  "source" : "894fabee8ba4b179.json",
  "parameterValues" : [ ]
}