{"name": "test_login[test_loginMulUsers1]", "status": "broken", "statusDetails": {"message": "TypeError: take_screenshot() missing 1 required positional argument: 'exception'", "trace": "self = <tests.test_web.TestWeb object at 0x0000017014D2A5E0>, test_loginMulUsers = ('Test7User7@qa.com', 'Admin2')\n\n    @pytest.mark.parametrize(\"test_loginMulUsers\", [\n        {\"username\": \"Test7User7@qa.com\", \"pwd\": \"Admin1\"},\n        {\"username\": \"Test7User7@qa.com\", \"pwd\": \"Admin2\"}], indirect=True)\n    def test_login(self, test_loginMulUsers):\n        try:\n            name, pwd = test_loginMulUsers\n            class_instance = LoginPage(self.driver, self.filepath)\n>           class_instance.navigateToApplication(self.configData['url']) \\\n                .clickToSingIn() \\\n                .enterUserName(name) \\\n                .enterPassword(pwd) \\\n                .clickToSingInButton() \\\n                .verifyMyAccountPage() \\\n                .clickToSingOutButton()\n\ntests\\test_web.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.myaccount_page.MyAccountPage object at 0x0000017014C9B040>\n\n    def verifyMyAccountPage(self):\n>       if BasePage.isElementPresent(self, By.XPATH, self.locators.PAGETITLE):\n\npages\\myaccount_page.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.myaccount_page.MyAccountPage object at 0x0000017014C9B040>, byelement = 'xpath', byindentifier = \"//h1[text()='My account']\"\n\n    def isElementPresent(self, byelement, byindentifier):\n        try:\n            isElementPresent = False\n            self.elementWaitCondition(byelement, byindentifier)\n            if len(self.driver.find_elements(by=byelement, value=byindentifier)) > 0:\n                isElementPresent = True\n            else:\n                isElementPresent = False\n    \n            return isElementPresent\n        except WebDriverException as e:\n>           raise e\n\nwebdriver\\WebdriverBasePage.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.myaccount_page.MyAccountPage object at 0x0000017014C9B040>, byelement = 'xpath', byindentifier = \"//h1[text()='My account']\"\n\n    def isElementPresent(self, byelement, byindentifier):\n        try:\n            isElementPresent = False\n>           self.elementWaitCondition(byelement, byindentifier)\n\nwebdriver\\WebdriverBasePage.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.myaccount_page.MyAccountPage object at 0x0000017014C9B040>, byelement = 'xpath', byindentifier = \"//h1[text()='My account']\"\n\n    def elementWaitCondition(self, byelement, byindentifier):\n>       self.web_driver_wait.until(\n            expected_conditions.presence_of_element_located((byelement, byindentifier)), \"element is not present\")\n\nwebdriver\\WebdriverBasePage.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"560e49ac49ec79b4e62e82d014dd3961\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x0000017014D1AB50>, message = 'element is not present'\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: element is not present\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_web.TestWeb object at 0x0000017014D2A5E0>, test_loginMulUsers = ('Test7User7@qa.com', 'Admin2')\n\n    @pytest.mark.parametrize(\"test_loginMulUsers\", [\n        {\"username\": \"Test7User7@qa.com\", \"pwd\": \"Admin1\"},\n        {\"username\": \"Test7User7@qa.com\", \"pwd\": \"Admin2\"}], indirect=True)\n    def test_login(self, test_loginMulUsers):\n        try:\n            name, pwd = test_loginMulUsers\n            class_instance = LoginPage(self.driver, self.filepath)\n            class_instance.navigateToApplication(self.configData['url']) \\\n                .clickToSingIn() \\\n                .enterUserName(name) \\\n                .enterPassword(pwd) \\\n                .clickToSingInButton() \\\n                .verifyMyAccountPage() \\\n                .clickToSingOutButton()\n        except WebDriverException as e:\n>           BaseTest.take_screenshot(e.args[0])\nE           TypeError: take_screenshot() missing 1 required positional argument: 'exception'\n\ntests\\test_web.py:27: TypeError"}, "attachments": [{"name": "stdout", "source": "4ce93f69-5807-474c-9f31-3fdb449e7f8d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_loginMulUsers", "value": "{'username': 'Test7User7@qa.com', 'pwd': 'Admin2'}"}], "start": 1603353426699, "stop": 1603353464378, "uuid": "f7e064bd-a66b-4158-9ce5-cd3ed8b68844", "historyId": "f4f5bbafc551f4a9dc0860432c25ba9b", "testCaseId": "0a64c71c36667f491e6e7da6f7ebf4e5", "fullName": "tests.test_web.TestWeb#test_login", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('driver_get', 'test_data', 'create_logger_file', 'config_data')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_web"}, {"name": "subSuite", "value": "TestWeb"}, {"name": "host", "value": "IN-IT2755"}, {"name": "thread", "value": "28252-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_web"}]}