{"name": "test_login[test_loginMulUsers1]", "status": "broken", "statusDetails": {"message": "TypeError: take_screenshot() missing 1 required positional argument: 'exception'", "trace": "self = <tests.test_web.TestWeb object at 0x0000024C46904DC0>, test_loginMulUsers = ('Test7User7@qa.com', 'Admin2')\n\n    @pytest.mark.parametrize(\"test_loginMulUsers\", [\n        {\"username\": \"Test7User7@qa.com\", \"pwd\": \"Admin1\"},\n        {\"username\": \"Test7User7@qa.com\", \"pwd\": \"Admin2\"}], indirect=True)\n    def test_login(self, test_loginMulUsers):\n        try:\n            name, pwd = test_loginMulUsers\n            class_instance = LoginPage(self.driver, self.filepath)\n>           class_instance.navigateToApplication(self.configData['url']) \\\n                .clickToSingIn() \\\n                .enterUserName(name) \\\n                .enterPassword(pwd) \\\n                .clickToSingInButton() \\\n                .verifyMyAccountPage() \\\n                .clickToSingOutButton()\n\ntests\\test_web.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x0000024C4699A970>, url = 'http://automationpractice.com/index.php'\n\n    def navigateToApplication(self, url):\n>       BasePage.navigateto(self, url)\n\npages\\login_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x0000024C4699A970>, url = 'http://automationpractice.com/index.php'\n\n    def navigateto(self, url):\n>       self.driver.get(url)\n\nwebdriver\\WebdriverBasePage.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5fc5c40798c19c9e748318cdc4f82be2\")>, url = 'http://automationpractice.com/index.php'\n\n    def get(self, url):\n        \"\"\"\n        Loads a web page in the current browser session.\n        \"\"\"\n>       self.execute(Command.GET, {'url': url})\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:333: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5fc5c40798c19c9e748318cdc4f82be2\")>, driver_command = 'get'\nparams = {'url': 'http://automationpractice.com/index.php'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024C467A7940>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x779574B4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77957484+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=86.0.4240.75)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_web.TestWeb object at 0x0000024C46904DC0>, test_loginMulUsers = ('Test7User7@qa.com', 'Admin2')\n\n    @pytest.mark.parametrize(\"test_loginMulUsers\", [\n        {\"username\": \"Test7User7@qa.com\", \"pwd\": \"Admin1\"},\n        {\"username\": \"Test7User7@qa.com\", \"pwd\": \"Admin2\"}], indirect=True)\n    def test_login(self, test_loginMulUsers):\n        try:\n            name, pwd = test_loginMulUsers\n            class_instance = LoginPage(self.driver, self.filepath)\n            class_instance.navigateToApplication(self.configData['url']) \\\n                .clickToSingIn() \\\n                .enterUserName(name) \\\n                .enterPassword(pwd) \\\n                .clickToSingInButton() \\\n                .verifyMyAccountPage() \\\n                .clickToSingOutButton()\n        except WebDriverException as e:\n>           BaseTest.take_screenshot(e.msg)\nE           TypeError: take_screenshot() missing 1 required positional argument: 'exception'\n\ntests\\test_web.py:27: TypeError"}, "attachments": [{"name": "stdout", "source": "d570f702-5282-42e9-b0ea-226c9c4570a5-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_loginMulUsers", "value": "{'username': 'Test7User7@qa.com', 'pwd': 'Admin2'}"}], "start": 1603353710813, "stop": 1603353710815, "uuid": "3be28753-d47e-4685-a29c-7e9c21420da2", "historyId": "f4f5bbafc551f4a9dc0860432c25ba9b", "testCaseId": "0a64c71c36667f491e6e7da6f7ebf4e5", "fullName": "tests.test_web.TestWeb#test_login", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('driver_get', 'test_data', 'create_logger_file', 'config_data')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_web"}, {"name": "subSuite", "value": "TestWeb"}, {"name": "host", "value": "IN-IT2755"}, {"name": "thread", "value": "26564-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_web"}]}